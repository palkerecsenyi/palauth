generator client {
  provider = "prisma-client-js"
  output = "../src/database/generated-models"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  displayName String
  passwordHash String

  ownedClients OAuthClient[]
  oauthGrants UserOAuthGrant[]
  oauthTokens OAuthToken[]
}

model Invite {
  token String @id @default(uuid())
  expires DateTime?
  singleUse Boolean
}

model OAuthClient {
  clientId String @id @default(uuid())
  clientSecretHash String
  redirectURIs OAuthClientRedirectURI[]

  name String
  usageDescription String

  admin User @relation(fields: [adminId], references: [id])
  adminId String

  userGrants UserOAuthGrant[]
  tokens OAuthToken[]
}

model OAuthClientRedirectURI {
  id String @id @default(uuid())
  client OAuthClient @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  clientId String
  uri String
}

model UserOAuthGrant {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  client OAuthClient @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  clientId String

  scope String
}

model OAuthToken {
  id String @id @default(uuid())
  type OAuthTokenType
  value String
  issued DateTime @default(now())
  expires DateTime

  fromCode String? @db.LongText

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  client OAuthClient @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  clientId String

  scopes OAuthTokenScope[]
}

model OAuthTokenScope {
  token OAuthToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  tokenId String
  scope String

  @@id([tokenId, scope])
}

enum OAuthTokenType {
  Access
  Refresh
}